import * as Vue from "vue";
declare const _default: Vue.DefineComponent<{
    debug: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * code rendered
     */
    code: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Hashtable of auto-registered components
     * @example { DatePicker: VueDatePicker }
     * @example { VueDatePicker }
     */
    components: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of auto-registered directives
     * @example { Tooltip: VueTooltip }
     * @example { VueTooltip }
     */
    directives: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of modules available in require and import statements
     * in the code prop
     * @example { lodash: require("lodash") }
     * @example { moment: require("moment") }
     */
    requires: {
        type: ObjectConstructor;
        default: () => void;
    };
    jsx: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Outside data to the preview
     * @example { count: 1 }
     */
    dataScope: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Avoid checking variables for availability it template
     */
    checkVariableAvailability: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    scope: any;
    previewedComponent: Vue.Raw<Vue.DefineComponent<{}, {}, {}, {}, {}, Vue.ComponentOptionsMixin, Vue.ComponentOptionsMixin, {}, string, Vue.VNodeProps & Vue.AllowedComponentProps & Vue.ComponentCustomProps, Readonly<Vue.ExtractPropTypes<{}>>, {}, {}>>;
    iteration: number;
    error: boolean;
    removeScopedStyle: () => void;
    compiledCodeForDebug: string;
}, {
    requiresPlusVue(): Record<string, any>;
}, {
    /**
     * Generates the Scope Id attribute value. It will be added to each
     * tag if a style is applied to scope the style only to this example
     */
    generateScope(): string;
    handleError(e: any): void;
    removeStyle(): void;
    renderComponent(code: string): Promise<void>;
}, Vue.ComponentOptionsMixin, Vue.ComponentOptionsMixin, ("error" | "success" | "detect-language")[], "error" | "success" | "detect-language", Vue.VNodeProps & Vue.AllowedComponentProps & Vue.ComponentCustomProps, Readonly<Vue.ExtractPropTypes<{
    debug: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * code rendered
     */
    code: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Hashtable of auto-registered components
     * @example { DatePicker: VueDatePicker }
     * @example { VueDatePicker }
     */
    components: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of auto-registered directives
     * @example { Tooltip: VueTooltip }
     * @example { VueTooltip }
     */
    directives: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of modules available in require and import statements
     * in the code prop
     * @example { lodash: require("lodash") }
     * @example { moment: require("moment") }
     */
    requires: {
        type: ObjectConstructor;
        default: () => void;
    };
    jsx: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Outside data to the preview
     * @example { count: 1 }
     */
    dataScope: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Avoid checking variables for availability it template
     */
    checkVariableAvailability: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onError?: ((...args: any[]) => any) | undefined;
    onSuccess?: ((...args: any[]) => any) | undefined;
    "onDetect-language"?: ((...args: any[]) => any) | undefined;
}, {
    components: Record<string, any>;
    jsx: boolean;
    directives: Record<string, any>;
    debug: boolean;
    requires: Record<string, any>;
    dataScope: Record<string, any>;
    checkVariableAvailability: boolean;
}, {}>;
export default _default;
