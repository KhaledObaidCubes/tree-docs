declare const _default: import("vue").DefineComponent<{
    /**
     * code rendered in the preview and the editor
     */
    code: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Layout vue component with 2 slots named `editor` & `preview`
     */
    layout: {
        type: ObjectConstructor;
        default: undefined;
    };
    /**
     * Hashtable of auto-registered components
     * @example { DatePicker: VueDatePicker }
     * @example { VueDatePicker }
     */
    components: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of auto-registered directives
     * @example { Tooltip: VueTooltip }
     * @example { VueTooltip }
     */
    directives: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of modules available in require and import statements
     * in the Preview component
     * @example { lodash: require("lodash") }
     * @example { "foo/bar.js": import("foo/bar.js") }
     */
    requires: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Time in ms debouncing updates to the preview
     */
    delay: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Do the code contain JSX rendered functions
     */
    jsx: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * These props will be passed as a spreat to your layout
     * They can be used to change the style
     */
    layoutProps: {
        type: ObjectConstructor;
        default: undefined;
    };
    /**
     * Props of vue-prism-editor
     * @example { lineNumbers: true }
     * @see https://github.com/koca/vue-prism-editor
     */
    editorProps: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Outside data to the preview
     * @example { count: 1 }
     */
    dataScope: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Set if checking variables for availability
     * when used in template
     * NOTE: if this is not checked, undefined vars will yield a blank output
     */
    checkVariableAvailability: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Show the red markings
     * where the compiler found errors
     */
    squiggles: {
        type: BooleanConstructor;
        default: boolean;
    };
}, unknown, {
    model: string;
    lang: string;
    prismLang: "html" | "vue-sfc" | "vsg" | "jsx" | "tsx";
    VueLiveDefaultLayout: any;
    /**
     * this data only gets changed when changing language.
     * it allows for copy and pasting without having the code
     * editor repainted every keystroke
     */
    stableCode: string;
    error: undefined;
}, {
    codeKey(): string;
}, {
    updatePreview(code: string): void;
    switchLanguage(newLang: "vue" | "vsg"): void;
    handleSuccess(): void;
    handleError(e: any): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * code rendered in the preview and the editor
     */
    code: {
        type: StringConstructor;
        required: true;
    };
    /**
     * Layout vue component with 2 slots named `editor` & `preview`
     */
    layout: {
        type: ObjectConstructor;
        default: undefined;
    };
    /**
     * Hashtable of auto-registered components
     * @example { DatePicker: VueDatePicker }
     * @example { VueDatePicker }
     */
    components: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of auto-registered directives
     * @example { Tooltip: VueTooltip }
     * @example { VueTooltip }
     */
    directives: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Hashtable of modules available in require and import statements
     * in the Preview component
     * @example { lodash: require("lodash") }
     * @example { "foo/bar.js": import("foo/bar.js") }
     */
    requires: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Time in ms debouncing updates to the preview
     */
    delay: {
        type: NumberConstructor;
        default: number;
    };
    /**
     * Do the code contain JSX rendered functions
     */
    jsx: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * These props will be passed as a spreat to your layout
     * They can be used to change the style
     */
    layoutProps: {
        type: ObjectConstructor;
        default: undefined;
    };
    /**
     * Props of vue-prism-editor
     * @example { lineNumbers: true }
     * @see https://github.com/koca/vue-prism-editor
     */
    editorProps: {
        type: ObjectConstructor;
        default: () => {};
    };
    /**
     * Outside data to the preview
     * @example { count: 1 }
     */
    dataScope: {
        type: ObjectConstructor;
        default: () => void;
    };
    /**
     * Set if checking variables for availability
     * when used in template
     * NOTE: if this is not checked, undefined vars will yield a blank output
     */
    checkVariableAvailability: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Show the red markings
     * where the compiler found errors
     */
    squiggles: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    components: Record<string, any>;
    jsx: boolean;
    directives: Record<string, any>;
    delay: number;
    editorProps: Record<string, any>;
    squiggles: boolean;
    requires: Record<string, any>;
    dataScope: Record<string, any>;
    checkVariableAvailability: boolean;
    layout: Record<string, any>;
    layoutProps: Record<string, any>;
}, {}>;
export default _default;
