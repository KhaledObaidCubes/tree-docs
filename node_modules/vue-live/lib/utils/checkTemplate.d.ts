interface Options {
    template?: string;
    props?: any;
    data?: () => Record<string, any> | Record<string, any>;
    computed?: Record<string, any>;
    methods?: Record<string, any>;
    attrAllowList?: string[];
    setup?: () => Record<string, any> | void;
}
export default function ($options: Options, checkVariableAvailability: boolean): void;
export declare function checkExpression(expression: string, availableVars: string[], templateVars: string[]): void;
export declare function traverse(templateAst: any, handlers: any[], availableVarNames?: string[]): void;
export declare class VueLiveUndefinedVariableError extends Error {
    varName: string;
    constructor(message: string, varName: string);
}
export declare class VueLiveParseTemplateAttrError extends Error {
    loc: any;
    constructor(message: string, loc: any);
}
export declare class VueLiveParseTemplateError extends Error {
    expression: {
        content: string;
    } | string;
    subError: Error;
    loc: any;
    constructor(message: string, expression: {
        content: string;
    } | string, subError: Error, loc: any);
}
export {};
